# Dein
[[plugins]]
repo = 'Shougo/dein.vim'


# Help
[[plugins]]
repo = 'vim-jp/vimdoc-ja'
hook_add = """
  set helplang=ja,en
"""


# The Silver Searcher
[[plugins]]
repo = 'rking/ag.vim'


# quickfix run
[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = """
 let g:quickrun_config = {
 \'*': {
   \'hook/time/enable': '1',
   \'split': ''}
\}
 let g:quickrun_config._ = {
  \ 'runner':'vimproc',
  \ "runner/vimproc/updatetime" : 10,
  \ 'outputter' : 'error',
  \ 'outputter/error/success' : 'buffer',
  \ 'outputter/error/error'   : 'quickfix',
  \ 'outputter/buffer/split'  : ':rightbelow 8sp',
  \ 'outputter/buffer/close_on_empty' : 1,
  \ }
"""


# Colors
[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = """
  au MyAutoCmd VimEnter * nested colorscheme onedark
"""

# {}()
[[plugins]]
repo = 'cohama/lexima.vim'

# complete
[[plugins]]
repo = 'Shougo/neocomplete.vim'
if = 'has("lua")'
on_i = 1

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
hook_add = """
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#omni_patterns = {}
  let g:deoplete#omni_patterns.ruby =
  \ ['[^. *\t]\.\w*', '\h\w*::']
"""
on_i = 1

[[plugins]]
repo = 'fishbullet/deoplete-ruby'

[[plugins]]
repo = 'Shougo/neocomplcache.vim'
if = 'has("lua")'
on_i = 1

# shell
[[plugins]]
repo = 'Shougo/deol.nvim'
if = 'has("nvim")'

# Denite
[[plugins]]
repo = 'Shougo/denite.nvim'
if = 'has("nvim")'

# syntax
[[plugins]] #js syntax
repo = 'othree/yajs.vim'
hook_add = """
  autocmd BufRead,BufNewFile *.es6 setfiletype javascript
"""
on_ft = 'javascript'

[[plugins]] #toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] #slim syntax
repo = 'slim-template/vim-slim'
on_ft = 'slim'

[[plugins]] #syntax check eslint
repo = 'w0rp/ale'
hook_add = """
  nmap <silent> <C-w>j <Plug>(ale_next_wrap)
  nmap <silent> <C-w>k <Plug>(ale_previous_wrap)
  let g:ale_fixers = {}
  let g:ale_fixers['javascript'] = ['prettier', 'eslint']
  let g:ale_fixers['javascript.jsx'] = ['prettier', 'eslint']
  let g:ale_fix_on_save = 1
"""
on_ft = ['javascript','php','ruby']

# Theme
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = """
  source ~/.vim/lightline.conf.vim
"""

# indent
[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = """
  let g:indentLine_color_term = 256
"""

# Ctrlp
[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = """
  let g:ctrlp_custom_ignore = '\v[\/](node_modules|build)$'
  if executable('ag')
    let g:ctrlp_use_caching  = 0
    let g:ctrlp_user_command = 'ag %s -i --nocolor --hidden --nogroup -g ""'
  endif
"""

# Vimagit
[[plugins]]
repo = 'jreybert/vimagit'
hook_add = """
  let g:magit_show_help              = 0
  let g:magit_default_show_all_files = 2
  let g:magit_default_fold_level     = 2
  let g:magit_default_sections       = ['global_help', 'info', 'unstaged', 'staged', 'commit']
"""

# tags
[[plugins]]
repo = 'soramugi/auto-ctags.vim'
hook_add = """
  let g:auto_ctags = 1
  let g:auto_ctags_directory_list = ['.git','.svn']
"""

[[plugins]]
repo = 'grassdog/tagman.vim'
on_ft = ['javascript', 'javascript.jsx']

# Filer
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = """
  nnoremap <silent><C-e> :NERDTreeToggle<CR>
  let NERDTreeShowHidden = 1
"""

# Git
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

# emmet
[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = """
  let g:user_emmet_jsx = 1
  let g:use_emmet_complete_tag = 1
  let g:user_emmet_settings = {
    \   'javascript.jsx' : {
    \     'extends' : 'jsx'
    \   },
    \   'javascript' : {
    \     'extends' : 'jsx',
    \   },
    \   'variables': {
    \     'lang': "ja"
    \   },
    \   'indentation':'  '
    \ }
"""
on_ft = ['tpl','javascript.jsx','html', 'eruby', 'css', 'scss']

# Rails
[[plugins]]
repo = 'tpope/vim-rails'

[[plugins]]
repo = 'tpope/vim-bundler'

# Reason
[[plugins]]
repo = 'reasonml/vim-reason-loader'

# js
[[plugins]]
repo = 'Galooshi/vim-import-js'
on_ft = ['javascript', 'javascript.jsx']

# Elixir
[[plugins]]
repo = 'elixir-lang/vim-elixir'

# Rspec
[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'thoughtbot/vim-rspec'
hook_add = """
  nmap <Leader>t :call RunCurrentSpecFile()<CR>
  nmap <Leader>s :call RunNearestSpec()<CR>
  nmap <Leader>l :call RunLastSpec()<CR>
  nmap <Leader>a :call RunAllSpecs()<CR>
  let g:rspec_command = "Dispatch bin/spring rspec {spec}"
"""
on_ft = ['ruby']
